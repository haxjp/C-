#include <iostream>
using namespace std;

//関数
/*void kannsuu()
{
	cout << "します。\n";
}*/

//引数の使い方
/*void kannsuu(int x)
{
cout << "メイン関数より" << x << "を受け取りました。";
}*/

//戻り値
/*int UNA()
{
	int z = 10;
	return z;
}

int main()
{*/

int main()
{

	//初期化前↓
	
	//int Yukarimonth}
	//int Yukariday;}
	//Yukarimonth = 12;}　//初期化していない
	//Yukariday = 22; 
	//cout << "ゆかりの誕生日は" << Yukarimonth << "月"<<Yukariday<<"日です。";

	//初期化↓

	//int Yukarimonth = 12; //初期化後
	//int Yukariday = 22;
	//cout << "ゆかりの誕生日は" << Yukarimonth << "月"<<Yukariday<<"日です。";

	//変数の上書き↓

	//int day = 1;
		//cout << "今日は" <<day<< "日です\n";
	//day = 2;
		//cout <<"明日は" <<day<< "日です";
	
    //変数から変数への代入↓

	//int years,years2;
	//years = 11;
	//cout << "東北きりたんは" << years << "歳です。";
	//years2 = years;
	//cout << "音街ウナも" << years2 << "歳です";
	
	//定数

	//定数の宣言
	//const double ensyu = 3.14159;
	//cout << "円周率は" << ensyu << "です。";

	//演算

	//int a = 2017;
	//int b = 8;
	//int c = 28;
	//cout << "2017+8+28＝" << a + b + c << "です";

	//計算機

	//double number1, number2, number3;
	//cout << "足し算計算機\n";
	//cout << "計算したい数値を入れてください。（小数点もOK）\n";
	//cin >> number1;
	//cin >> number2;
	//cin >> number3;
	//double kekka = number1 + number2 + number3;
	//cout << "\n計算結果は" << kekka << "です。";

	//簡単な奴

	//int ono;
	//cout << "あなたは金の斧か銀の斧、どれとしましたか？\n1：銀の斧\n2：金の斧\n3：どちらでもない。\n";
	//cout << "3つの中からを数字で選んでください。";
	//cin >> ono;
	//if (ono == 1)
	//{cout << "さようなら";}
	//if (ono == 2)
	//{cout << "さようなら";}
	//if (ono == 3)
	//{cout << "あなたは正直者ですから、この金と銀の斧を差し上げましょう。さようなら。";}

	//for文

	//int a = 0;
	//int v;
	//for (int a{}; a <= 5;a++)
	//{if (v = 1) { cout << a << "回目のループです\n"; }}
	//return 0 ;

	//while文
	
	//float a;
	//int b = 0;
	//cout << "aに数値を入力して無限ループします。しかしaは０を超えるとループしません。\n";
	//cin >> a;
	//if (a >= 0)
	//{cout << "０以上を入力したのでループしませんでした。";}
	//while (a+1 <= 1)
	//{cout << b << "ループ\n";b++;}
	

	//簡単な選択（switch）

	//cout << "数値を入力すると次の文が出ます。\n1:あんこ\n2:インコ\n3:うんこ\n";
	//int a;
	//cin >> a;
	//switch (a) {
	//case 1:cout << "あんこ"; break;  case 2: cout << "インコ"; break;  case 3:cout << "うんこ"; break; default:cout<<"適正な数値が入力されませんでした。"}

	//関数
	/*cout << "何かを";
	kannsuu();
	cout << "それを";
	kannsuu();
	cout << "あれを";
	kannsuu();*/
	
	//引数の使い方
	/*int a = 10;
	kannsuu(a);*/

	//戻り値
	/*
	int a;
	a = UNA();
	cout << "戻り値は" << a << "です。";
	return 0;
	}*/

//アドレス
int a = 10;
cout<< "aの値は" << a << "です。\naのアドレスは"<<&a<<"です。";
return 0;
}



/*int main() { cout << "あいうえお\n"; return 0; }
 プログラムは上から実行されていく
 最初の#include は定義を読み込むという宣言。そのあとの<>の中身はどのファイルを読み込むかを定義している。このプログラムでは、#inculudeという宣言に対してiostreamというファイルを読み込んでいる。
 using namespeace std;というソースはstdと後から省略するために使われていている。本来はその次の行のcoutのところをstd.coutとかく。
 int main関数　上のソースの中の int main()の関数の次に中括弧の中にあるコードに処理したいコードを書く。
 cout　cout いう関数は画面に文字を描写するためにある、また表示させたい文字を<<の後に書く"表示させたい文字（複数）"か'表示させたい文字（一文字）'でくくる。
 return　int main関数の場合は０を入力する。
 最後の;（セミコロン）　分の終わりにつけるマルのようなもの。
変数　メモリに扱うデータを保存させてある
データ型　データの種類を示す　｛基本の種類｝int型/整数のみを保存/ char型/文字を保存する/ double型/少数を保存するとき/ void型/関数の戻り値の型として使う/
識別子　データ値に名前と付けることを識別子という。定義方法は int main関数の中に int つけたい名前;　でOK
識別子にデータを入れる方法int型の場合は、int識別子だとすると int識別子 = 入れたい数値;でOK charだと識別子 = 入れたい文字;でOK。
 初期化　最初から識グラムが上から実行されていくことを逆手にとって、最初にint 名前 = 数値;の後、同じ名前 = 違う数値で読み込ませれば最初のものを、まず表示させ、その後上書きされたものをまた表示する。
 ほかの変数への代入別子にデータが入った状態にすること、つまり今までは int 名前；　名前 = 数値;　だったけど、初期化を使うと、int 名前 = 数値;で完了する。
 変数の上書き　プロ方法　宣言はint A,B;のように、カンマで区切って二つ同時に宣言することができる。A = 11だった場合 B = A で　B = 11となる。
 const  変わってほしくない数値、定数、例えば円周率や誕生日などは不変の値である。その場合constを使って誕生日を宣言をすると const int 名前 = 誕生日　でOK。代入するとエラーになる。
 演算　オペランド（演算数）は 数式の左辺とかの数値、演算記号のことを演算子という、大体は+,-,*,/をよく使う
 cin ユーザーに入力してもらいその入力されたデータを識別子に代入する。
if文　分岐処理のこと、選択によって結果が変わったりする機構が作れる。　書き方はif(条件①){①の処理でできる}　この括弧の中の条件とは数値、文字を入れる。またこの括弧の中の条件に当てはまらなかったものは else if (条件➁){➁の処理}でまた分岐ができる。またすべての条件に当てはまらないものは、else　{処理}とかく
for文　決めた回数分だけ処理を繰り返すことができる for(変数;繰り返す回数;式){}
while文　forの条件が自由になったん感じwhile(条件){処理}　　条件は　(条件１||条件２||条件３...)のように何個もつけることが出来る。
switch文 switch(変数){case 変数の値:処理;case変数の値２:処理２....}（セミコロンではないのでので注意！）　
default switch文の中のcaseのどれにもあてはならなかった時にする処理　...default:処理
関数　新しい机のようなもの　変数を新たに宣言できたりするほとんどは　main関数より前に宣言する #include～～ 型 関数名（引数リスト）｛文｝ int main(){文}みたいな感じ。
関数の呼び出し　main関数内で　関数名(　引数（ある場合）　);で呼び出し関数を実行する。また何度も実行することができる。
 main関数側で作った関数の変数を使えるようにすることを引数という　使い方は作った関数の関数リストに型を入れ main関数で 関数名(main関数内で初期化された変数)で引数リストのmain関数内の変数が代入される。
 戻り値　引数の逆で作った関数の中の変数をmain関数で使うこと
 作った関数をmain関数より後で書く方法　main関数より前に関数の宣言をする、この時セミコロンをつけること
 アドレス　変数がメモリのどこに保存されているかを示す値　例でいうとこれは　&a　のように使うことができる。


 */